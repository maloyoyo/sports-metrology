import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

#Результаты испытуемых
v = [3450, 3500, 3600,
3300, 3250, 3550, 3230,
3455, 4000, 3350, 3200,
3400, 3400, 3800, 3700,
3750, 3650, 3500, 3650,
3800, 3700, 3700, 3450,
3600, 3700, 3700]
#1
n = len(v)
m = 5
xmin = min(v)
xmax = max(v)
#2	Определение границ варьирования (изменения) результатов наблюдений.
def maxloc(num_list):
    return num_list.index(max(num_list))
def minloc(num_list):
    return num_list.index(min(num_list))
#3Размах вариации
A = xmax - xmin
#4 Выбор числа классов
Mmax = ((A)/(3*5))+1
#5 Расчет ширины классовго интервала
J = A/(m-1)
#6 Расчет фактического размаха вариации
Af = J*m
#7 Расчёт «запаса» по размаху вариации:
dA = Af - A
#8 Определение границ системы классов
Xh1 = xmin - (dA/2)
Xh5 = xmax + (dA/2)
Xbi = dA + J

#10 Определение гранци классов
list2 = np.arange ( int(Xh1), int(Xh5), int(J))
list3 = np.arange ( int(Xh1+J), int(Xh5+J), int(J))

#12 Определение классовых частот
counts, bins = np.histogram(v, bins=int(m), range=(int(Xh1), int(Xh5)))

#13 Накопленные классовые частоты
b = ([counts])
bb = b[0][0]
b1 = b[0][0] + b[0][1]
b2 = b[0][2] +b1
b3 = b[0][3] +b2
b4 = b[0][4] +b3
bbb = [bb, b1, b2, b3, b4]
#14 Частости
c = ([counts])
cc = round((c[0][0]/n)*100)
c1 = round((c[0][1]/n)*100)
c2 = round((c[0][2]/n)*100)
c3 = math.floor((c[0][3]/n)*100)
c4 = round((c[0][4]/n)*100)
ch = [cc, c1, c2, c3, c4]

#15 Накопленные частости
cc = round((c[0][0]/n)*100)
c5 = cc+c1
c6 = c5+c2
c7 = c6+c3
c8 = c7+c4
ccc = [cc, c5, c6, c7,c8]


#16 График 1
plt.bar(((list2*2+J)/2), ch, width = J)
plt.title('Гистограмма распределения'),
plt.ylabel('Частость'),
plt.xlabel('Число подтягиваний')
plt.show()


# График 2
#plt.bar([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], v)

plt.plot(((list2*2+J)/2), ch)
plt.scatter(((list2*2+J)/2), ch, color='r')
plt.title('Полигон распределения'),
plt.ylabel('Частость'),
plt.xlabel('Число подтягиваний')
plt.show()

# График 3
plt.plot(list3, ccc)
plt.scatter(list3, ccc, color='r')
plt.title('Кумулята распределения '),
plt.ylabel('Накопленная частость'),
plt.xlabel('Число подтягиваний')
plt.show()

# ПАРАМЕТРЫ РАСПРЕДЕЛЕНИЯ

pr1 = (counts*((list2*2+J)/2))

sr = round(sum(pr1)/n)

pr2 = ((list2*2+J)/2)-sr

pr3 = pr2**2

pr4 = pr3*counts

pr5 = round(math.sqrt(sum(pr4)/n))

pr6 = math.floor((pr5/sr)*100)

pr7 = round(pr5/math.sqrt(n), 3)

#Нормированные отклонения

pr8 = round((v[2]-sr)/pr5, 2)
pr9 = round((v[6]-sr)/pr5, 2)

pr10 = round((xmin-sr)/pr5, 2)
pr11 = round((xmax-sr)/pr5, 2)
pr12 = round(sr/pr5, 2)

pr13 = (pr7)*2.06

pr14 = round(sr-pr13, 2)
pr15 = round(sr+pr13, 2)

#2	Определение границ варьирования (изменения) результатов наблюдений.
print("xmim =", int(xmin), "метрво", ",номер испытуемого=", minloc(v)+1, "xmax =", int(xmax), "метров",  ",номер испытуемого=", maxloc(v)+1)
#1
print("n =", int(n))
#3Размах вариации
print("A(размах вариации) =", A, "метров")
#4 Выбор числа классов
print("Максимально допустимое число классов = ", m)
#5 Расчет ширины классовго интервала
print("Ширина классового интервала", J)
#6 Расчет фактического размаха вариации
print("Фактический размах вариации", Af)
#7 Расчет «запаса» по размаху вариации
print("«запас» по размаху вариации", dA)
#8 Определение границ системы классов
print("Нижняя граница 1 класса, ", Xh1, "Верхнаяя грацина 5 класса ", Xh5)

print("Оценка распределения")
#10 Определение границ классов
print("Границы классов в метрах", list2)
#11 Класовые варианты
print("Классовые варианты в метрах",(list2*2+J)/2)

#12 Классовые частоты
print("Классовые частоты", counts)
#13
print("Накопленные классовые частоты", bbb)
#14
print("Частости", ch)
#15
print("Накопленные частости", ccc )
#17
print(pr1)

print("Расчёт параметров распределения")
#18
print("Cреднеарифметическое типичное значение", sr)
#19
print("Xi - СТЗ", pr2)
#20
print("(Xi - СТЗ)^2", pr3)
#21
print("((Xi - СТЗ)^2)*fi", pr4)
#22
print("Среднеквадратическое отклонение", pr5)
#23
print("Коэффициент изменчивости", pr6, "%")
#24
print("Ошибка репрезентативности",pr7)
#25
print("Нормированные отклонения","t3", pr8,"t7", pr9)
#26
print(pr13)
print("Границы доверия", pr14, sr, pr15)
